package com.msl.algos;

public class LinkedListDemo {
	Node head; // head of list 
	
	static class Node 
	{ 
    		int data; 
    		Node next; 
    		
    		Node(int d) 
    		{ 
        			data = d; 
        			next = null; 
    		} 
	} 
	// Method to insert a new node 
	public static LinkedListDemo insert(LinkedListDemo list, int data) 
	{ 
    		// Create a new node with given data 
    		Node new_node = new Node(data); 
    		new_node.next = null; 
    		
    		// If the Linked List is empty, then make the new node as head 
    		if (list.head == null) 
    		{ 
        			list.head = new_node; 
    		} 
    		else 
    		{ 
        			// Else traverse till the last node and insert the new_node there 
        			Node last = list.head; 
        			while (last.next != null) 
        			{ 
            			last = last.next; 
        			} 
			// Insert the new_node at last node 
        			last.next = new_node; 
    		} 
    		return list; 
	} 

	public static void printList(LinkedListDemo list) 
	{	 
    		Node currNode = list.head; 
    		System.out.print("LinkedList: "); 
    		// Traverse through the LinkedList 
    		while (currNode != null) 
    		{ 
        			// Print the data at current node 
        			System.out.print(currNode.data + " "); 
        			// Go to next node 
        			currNode = currNode.next; 
    		} 
    		System.out.println(); 
	} 

	
	public static void main(String[] args) {
		/* Start with the empty list. */
		LinkedListDemo list = new LinkedListDemo(); 
		// Insert the values 
		list = insert(list, 1); 
		list = insert(list, 2); 
		list = insert(list, 3); 
		list = insert(list, 4); 
		list = insert(list, 5); 
		list = insert(list, 6); 
		list = insert(list, 7); 
		list = insert(list, 8); 
		// Print the LinkedList 
		printList(list); 

		
	}

}
